#!/usr/bin/env python
#
# Copyright (C) 2012 Chris Lamb <lamby@debian.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import re
import sys
import urllib
import urllib2
import optparse
import fileinput

from BeautifulSoup import BeautifulSoup

TEMPLATE = """%(title)s (%(location)s, GBP %(price)s)
%(url)s
"""

def main():
    parser = optparse.OptionParser(
        usage="usage: %prog [options] <query>",
    )

    parser.add_option('-c', '--cron',
        dest='cron',
        help="Use non-zero exit code if items found",
        action='store_true',
        default=False,
    )

    parser.add_option('-l', '--location',
        dest='location',
        default="United Kingdom",
        help="Gumtree location to filter by (default: %default)",
    )

    parser.add_option('-s', '--state-file',
        dest='state_file',
        help="File to store state across invokations (default: %default)",
        default=None,
    )

    options, args = parser.parse_args()

    if not args:
        parser.error("No search query specified")

    exit = 0
    seen = get_state(options.state_file)
    query = ' '.join(args)

    for listing in parse(get_url(options.location, query)):
        if listing['url'] in seen:
            continue

        print TEMPLATE % listing

        exit = 1
        set_state(options.state_file, listing['url'])

    if options.cron:
        sys.exit(exit)

def get_url(location, query):
    base = 'http://www.gumtree.com/cgi-bin/list_postings.pl'

    return '%s?%s' % (base, urllib.urlencode({
        'search_terms': query,
        'search_location': location,
    }))

def parse(url):
    soup = BeautifulSoup(urllib2.urlopen(url))

    def by_class(bs, elem, klass):
        return bs.find(elem, attrs={'class': klass})

    re_item = re.compile(r'^hlisting offer-sale ')

    for x in soup('li', attrs={'class': re_item}):
        url = 'http://www.gumtree.com%s' % by_class(x, 'a', 'description')['href']

        try:
            price = by_class(x, 'span', 'price').contents[0][1:]
        except AttributeError:
            price = "No price specified"

        yield {
            'url': url,
            'title': by_class(x, 'a', 'description')['title'].strip(),
            'price': price,
            'location': by_class(x, 'span', 'location').contents[0],
        }

def get_state(filename):
    if not filename:
        return set()

    try:
        return set(x.strip() for x in fileinput.input(filename))
    except IOError:
        return set()

def set_state(filename, url):
    if not filename:
        return

    with open(filename, 'a') as f:
        print >>f, url

if __name__ == '__main__':
    main()
